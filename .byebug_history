exit
c
user.save!
n
set_params
c
user
n
c
user.save!
n
set_params
set_paramsd
n
exit
c
n
last_order.created_at >= 1.minute.ago
last_order
n
order
c
@current_user.orders
@current_user
current_user
last_order.id
last_order.created_at
last_order.created_at >= 1.minute.ago
1.minute.ago
last_order.created_at >= 1.minute.ago
last_order.created_at
n
order
exit
c
customer.orders.create!(address: "123 Indore", price: 1000, created_at: 1.hour.ago)
customer.orders.create(address: "123 Indore", price: 1000, created_at: 1.hour.ago)
customer
exit
customer.orders.create(address: "123 Indore", price: 1000, created_at: 1.hour.ago)
customer.orderscustomer.orders.create(address: "123 Indore", price: 1000, created_at: 1.hour.ago)
customer
exit
Time.now
last_order
exit
eixt
last_order
exit
last_order
exit
n
1.minute.ago
@current_user
last_order
c
n
order
n
c
n
c
n
last_order
exit
n
last_order
c
n
customer.id
user_id
n
order
n
@current_user
exit
n
last_order
n
last.order
n
c
n
@current_user.type
exit
user_id
exit
@current_user.type
continue
d
n
c
n
@current_user.typen
@current_user.type
@current_user
exit
user.save
n
user.save
exit
user.save!
user.save
n
set_params
c
@current_user.update!(set_params)
!@current_user.update(set_params)
@current_user.update(set_params)
@current_user
set_params
n
c
n
decoded
n
c
n
JWT.encode(payload, secret_key)
user
n
c
user
user.id
n
c
jwt_decode(header)
header
request.headers[ 'Authorization' ]
decoded
n
c
decoded
n
exit
cart_items.blank?
cart_items = nil
cart_items.blank?
n
cart_items
exit
c
n
c
n
cart_items.blank?
cart_items = nil
cart_items.blank?
n
cart_items
add_item.save
add_item = cart_items.new(set_params)
dish
cart_items.blank?
cart_items.first
dish.restaurant
cart_items.blank?
exit
cart_items.blank?
add_item.save
add_item = cart_items.new(set_params)
cart_items.blank?
c
n
dish.restaurant
c
n
cart_items.first.dish.restaurant
cart_items.blank?
cart_items
dish.nil?
dish.nil
dish
exit
c
 expect(response.body).to eq("No record found..")
response.body
response
c
dish
n
c
restaurant.id
:restaurant.id
restaurant_id
category_id
owner
n
c
dish.save!
dish.save
dish
n
restaurant
n
owner
n
c
n
restaurant
n
restaurant
n
owner
n
exit
n
exit
restaurant
n
selected_restaurant
c
n
exit
restaurant
FactoryBot.build(:restaurant)
:restaurant
let!(:restaurant){ FactoryBot.build(:restaurant) }
    6:   let!(:restaurant){ FactoryBot.build(:restaurant) }
let!(:restaurant)
n
let!(:restaurant)
n
let!(:restaurant)
n
let!(:restaurant)
restaurant
FactoryBot.build(:restaurant)
exit
restaurant.save
n
set_params
n
exit
restaurant
n
restaurant
exit
restaurant.save
restaurant.save!
restaurant
n
set_params
exit
set_params
set_parmas
c
n
exit
n
restaurant
n
c
n
c
\c
